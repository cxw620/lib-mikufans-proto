// This file is @generated by prost-build.
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BindNote {
    ///
    #[prost(string, tag = "1")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub high_color: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub color: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Business {
    ///
    #[prost(int64, tag = "1")]
    pub business_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub business_name: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "Select", tag = "3")]
    pub select: i32,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComplianceDescribe {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "2")]
    pub is_link: bool,
    ///
    #[prost(string, tag = "3")]
    pub link: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComplianceModel {
    ///
    #[prost(enumeration = "ComplianceAlertType", tag = "1")]
    pub pop_field: i32,
    ///
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(message, repeated, tag = "3")]
    pub describes: ::prost::alloc::vec::Vec<ComplianceDescribe>,
    ///
    #[prost(string, tag = "4")]
    pub confirm_text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub cancel_text: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomerInfo {
    ///
    #[prost(int64, tag = "1")]
    pub customer_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub customer_name: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "CustomerRankStatus", tag = "3")]
    pub customer_state: i32,
    ///
    #[prost(int64, tag = "4")]
    pub queue_rank: i64,
    ///
    #[prost(int32, tag = "5")]
    pub is_cancel: i32,
    ///
    #[prost(message, optional, tag = "6")]
    pub pre_customer: ::core::option::Option<MsgSpLitAnsCustomer>,
    ///
    #[prost(string, tag = "7")]
    pub customer_state_desc: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmotionInfo {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub url: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "3")]
    pub size: i32,
    ///
    #[prost(string, tag = "4")]
    pub gif_url: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluationShowInfo {
    ///
    #[prost(bool, tag = "1")]
    pub show: bool,
    ///
    #[prost(enumeration = "EvaluateType", tag = "2")]
    pub r#type: i32,
    ///
    #[prost(message, repeated, tag = "3")]
    pub step_select: ::prost::alloc::vec::Vec<EvaluationStepSelect>,
    ///
    #[prost(int64, tag = "4")]
    pub msg_key: i64,
    ///
    #[prost(bool, tag = "5")]
    pub up: bool,
    ///
    #[prost(string, tag = "6")]
    pub feedback: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub customer_sess_id: i64,
    ///
    #[prost(bool, tag = "8")]
    pub done: bool,
    ///
    #[prost(string, tag = "9")]
    pub editor_input: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "10")]
    pub step_msg_key: i64,
    ///
    #[prost(int64, tag = "11")]
    pub machine_sess_id: i64,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvaluationStepSelect {
    ///
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "Select", tag = "2")]
    pub select: i32,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Group {
    ///
    #[prost(int64, tag = "1")]
    pub group_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub group_name: ::prost::alloc::string::String,
    ///
    #[prost(enumeration = "Select", tag = "3")]
    pub select: i32,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Msg {
    ///
    #[prost(message, optional, tag = "1")]
    pub sender_info: ::core::option::Option<TalkerInfo>,
    ///
    #[prost(message, optional, tag = "2")]
    pub receiver_info: ::core::option::Option<TalkerInfo>,
    ///
    #[prost(enumeration = "MsgType", tag = "3")]
    pub msg_type: i32,
    ///
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
    ///
    #[prost(int64, tag = "6")]
    pub msg_key: i64,
    ///
    #[prost(int32, tag = "7")]
    pub msg_status: i32,
    ///
    #[prost(enumeration = "MsgSource", tag = "8")]
    pub msg_source: i32,
    ///
    #[prost(string, tag = "9")]
    pub dev_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "10")]
    pub seq_no: i64,
    ///
    #[prost(int32, tag = "11")]
    pub situation: i32,
    ///
    #[prost(message, optional, tag = "12")]
    pub bind_note: ::core::option::Option<BindNote>,
    ///
    #[prost(bool, tag = "13")]
    pub is_ai: bool,
    ///
    #[prost(int64, repeated, tag = "14")]
    pub ai_link_msg: ::prost::alloc::vec::Vec<i64>,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSpLitA {
    ///
    #[prost(enumeration = "SplitAnsMsgContentType", tag = "1")]
    pub r#type: i32,
    ///
    #[prost(message, repeated, tag = "2")]
    pub business_list: ::prost::alloc::vec::Vec<Business>,
    ///
    #[prost(message, repeated, tag = "3")]
    pub group_list: ::prost::alloc::vec::Vec<Group>,
    ///
    #[prost(message, optional, tag = "4")]
    pub customer_info: ::core::option::Option<CustomerInfo>,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSpLitAnsCustomer {
    ///
    #[prost(int64, tag = "1")]
    pub customer_id: i64,
    ///
    #[prost(string, tag = "2")]
    pub customer_name: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionInfo {
    ///
    #[prost(message, optional, tag = "1")]
    pub talker_info: ::core::option::Option<TalkerInfo>,
    ///
    #[prost(message, optional, tag = "2")]
    pub last_msg: ::core::option::Option<Msg>,
    ///
    #[prost(message, optional, tag = "3")]
    pub unread_info: ::core::option::Option<UnreadInfo>,
    ///
    #[prost(int64, tag = "4")]
    pub ack_seqno: i64,
    ///
    #[prost(int64, tag = "5")]
    pub ack_ts: i64,
    ///
    #[prost(int64, tag = "6")]
    pub session_ts: i64,
    ///
    #[prost(int64, tag = "7")]
    pub max_seqno: i64,
    ///
    #[prost(int32, tag = "8")]
    pub status: i32,
    ///
    #[prost(string, tag = "9")]
    pub tag_icon: ::prost::alloc::string::String,
    ///
    #[prost(int32, tag = "10")]
    pub top_set: i32,
    ///
    #[prost(string, tag = "11")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "12")]
    pub do_not_disturb: bool,
    ///
    #[prost(string, tag = "13")]
    pub setting_page_schema: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "14")]
    pub setting_page_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "15")]
    pub tag_name: ::prost::alloc::string::String,
    ///
    #[prost(message, optional, tag = "16")]
    pub compliance: ::core::option::Option<ComplianceModel>,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TalkerInfo {
    ///
    #[prost(enumeration = "TalkerType", tag = "1")]
    pub r#type: i32,
    ///
    #[prost(int64, tag = "2")]
    pub shop_father_id: i64,
    ///
    #[prost(int64, tag = "3")]
    pub shop_id: i64,
    ///
    #[prost(int64, tag = "4")]
    pub customer_id: i64,
    ///
    #[prost(int64, tag = "5")]
    pub machine_session_id: i64,
    ///
    #[prost(string, tag = "6")]
    pub customer_session_id: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "7")]
    pub uid: i64,
    ///
    #[prost(string, tag = "8")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "9")]
    pub pic_url: ::prost::alloc::string::String,
    ///
    #[prost(string, repeated, tag = "10")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnreadInfo {
    ///
    #[prost(int64, tag = "1")]
    pub unread_count: i64,
    ///
    #[prost(int64, tag = "2")]
    pub customer_unread_count: i64,
    ///
    #[prost(int64, tag = "3")]
    pub machine_unread_count: i64,
    ///
    #[prost(int64, tag = "4")]
    pub message_unread_count: i64,
    ///
    #[prost(int64, tag = "5")]
    pub notice_unread_count: i64,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowOptionEvaluation {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(int64, tag = "5")]
    pub im_stat: i64,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowOptionGoods {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowOptionHistory {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowOptionMessage {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "5")]
    pub sub_title: ::prost::alloc::string::String,
    ///
    #[prost(bool, tag = "6")]
    pub is_new_ticket: bool,
    ///
    #[prost(string, tag = "7")]
    pub new_ticket_jump_url: ::prost::alloc::string::String,
}
///
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowOptionOrder {
    ///
    #[prost(string, tag = "1")]
    pub icon: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "3")]
    pub jump_url: ::prost::alloc::string::String,
    ///
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ComplianceAlertType {
    ///
    None = 0,
    ///
    AiModel = 1,
}
impl ComplianceAlertType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ComplianceAlertType::None => "None",
            ComplianceAlertType::AiModel => "AIModel",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "None" => Some(Self::None),
            "AIModel" => Some(Self::AiModel),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CustomerRankStatus {
    ///
    Offline = 0,
    ///
    Crowd = 1,
    ///
    Online = 2,
    ///
    SwitchOnline = 3,
    ///
    Ranking = 4,
    ///
    SwitchRanking = 5,
    ///
    OutCustomerQueue = 6,
    ///
    OutCustomerQueueWithMessage = 7,
    ///
    OutWork = 8,
    ///
    CustomerInvite = 9,
    ///
    WorkBatchStopRank = 10,
    ///
    ForceSwitchCustomer = 11,
    ///
    RankingOnly = 12,
    ///
    NoCustomerOnly = 13,
    ///
    OfflineProcess = 14,
}
impl CustomerRankStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CustomerRankStatus::Offline => "OFFLINE",
            CustomerRankStatus::Crowd => "CROWD",
            CustomerRankStatus::Online => "ONLINE",
            CustomerRankStatus::SwitchOnline => "SWITCH_ONLINE",
            CustomerRankStatus::Ranking => "RANKING",
            CustomerRankStatus::SwitchRanking => "SWITCH_RANKING",
            CustomerRankStatus::OutCustomerQueue => "OUT_CUSTOMER_QUEUE",
            CustomerRankStatus::OutCustomerQueueWithMessage => {
                "OUT_CUSTOMER_QUEUE_WITH_MESSAGE"
            }
            CustomerRankStatus::OutWork => "OUT_WORK",
            CustomerRankStatus::CustomerInvite => "CUSTOMER_INVITE",
            CustomerRankStatus::WorkBatchStopRank => "WORK_BATCH_STOP_RANK",
            CustomerRankStatus::ForceSwitchCustomer => "FORCE_SWITCH_CUSTOMER",
            CustomerRankStatus::RankingOnly => "RANKING_ONLY",
            CustomerRankStatus::NoCustomerOnly => "NO_CUSTOMER_ONLY",
            CustomerRankStatus::OfflineProcess => "OFFLINE_PROCESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OFFLINE" => Some(Self::Offline),
            "CROWD" => Some(Self::Crowd),
            "ONLINE" => Some(Self::Online),
            "SWITCH_ONLINE" => Some(Self::SwitchOnline),
            "RANKING" => Some(Self::Ranking),
            "SWITCH_RANKING" => Some(Self::SwitchRanking),
            "OUT_CUSTOMER_QUEUE" => Some(Self::OutCustomerQueue),
            "OUT_CUSTOMER_QUEUE_WITH_MESSAGE" => Some(Self::OutCustomerQueueWithMessage),
            "OUT_WORK" => Some(Self::OutWork),
            "CUSTOMER_INVITE" => Some(Self::CustomerInvite),
            "WORK_BATCH_STOP_RANK" => Some(Self::WorkBatchStopRank),
            "FORCE_SWITCH_CUSTOMER" => Some(Self::ForceSwitchCustomer),
            "RANKING_ONLY" => Some(Self::RankingOnly),
            "NO_CUSTOMER_ONLY" => Some(Self::NoCustomerOnly),
            "OFFLINE_PROCESS" => Some(Self::OfflineProcess),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EvaluateType {
    ///
    EvaluateMachineMsg = 0,
    ///
    EvaluateCustomer = 1,
    ///
    EvaluateCustomerInvited = 2,
    ///
    EvaluatePanelMsg = 3,
    ///
    EvaluateMachineSess = 4,
    ///
    EvaluateMachineSessInvited = 5,
}
impl EvaluateType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EvaluateType::EvaluateMachineMsg => "EvaluateMachineMsg",
            EvaluateType::EvaluateCustomer => "EvaluateCustomer",
            EvaluateType::EvaluateCustomerInvited => "EvaluateCustomerInvited",
            EvaluateType::EvaluatePanelMsg => "EvaluatePanelMsg",
            EvaluateType::EvaluateMachineSess => "EvaluateMachineSess",
            EvaluateType::EvaluateMachineSessInvited => "EvaluateMachineSessInvited",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EvaluateMachineMsg" => Some(Self::EvaluateMachineMsg),
            "EvaluateCustomer" => Some(Self::EvaluateCustomer),
            "EvaluateCustomerInvited" => Some(Self::EvaluateCustomerInvited),
            "EvaluatePanelMsg" => Some(Self::EvaluatePanelMsg),
            "EvaluateMachineSess" => Some(Self::EvaluateMachineSess),
            "EvaluateMachineSessInvited" => Some(Self::EvaluateMachineSessInvited),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgSource {
    ///
    Invalid = 0,
    ///
    Ios = 1,
    ///
    Android = 2,
    ///
    Ipad = 3,
    ///
    AndroidHd = 4,
    ///
    PcApp = 5,
    ///
    Web = 6,
    ///
    Biz = 7,
    ///
    ThirdShopStage = 8,
    ///
    Ai = 9,
}
impl MsgSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MsgSource::Invalid => "INVALID",
            MsgSource::Ios => "IOS",
            MsgSource::Android => "ANDROID",
            MsgSource::Ipad => "IPAD",
            MsgSource::AndroidHd => "ANDROID_HD",
            MsgSource::PcApp => "PC_APP",
            MsgSource::Web => "WEB",
            MsgSource::Biz => "Biz",
            MsgSource::ThirdShopStage => "ThirdShopStage",
            MsgSource::Ai => "AI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INVALID" => Some(Self::Invalid),
            "IOS" => Some(Self::Ios),
            "ANDROID" => Some(Self::Android),
            "IPAD" => Some(Self::Ipad),
            "ANDROID_HD" => Some(Self::AndroidHd),
            "PC_APP" => Some(Self::PcApp),
            "WEB" => Some(Self::Web),
            "Biz" => Some(Self::Biz),
            "ThirdShopStage" => Some(Self::ThirdShopStage),
            "AI" => Some(Self::Ai),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgType {
    ///
    Invalid = 0,
    ///
    Text = 1,
    ///
    Img = 2,
    ///
    Withdraw = 5,
    ///
    FavEmoji = 6,
    ///
    Share = 7,
    ///
    Video = 17,
    ///
    Order = 10001,
    ///
    Goods = 10002,
    ///
    Evaluation = 10003,
    ///
    Message = 10004,
    ///
    MachineA = 10005,
    ///
    MachineQ = 10006,
    ///
    CustomerCome = 10007,
    ///
    MachineWelcomeText = 10008,
    ///
    MachineWelcomeQlist = 10009,
    ///
    SplitQ = 10010,
    ///
    SplitA = 10011,
    ///
    SwitchCustomer = 10012,
    ///
    CustomerInviteEvaluation = 10013,
    ///
    OutCustomerQueue = 10014,
    ///
    OutCustomerSess = 10015,
    ///
    MessageGuide = 10016,
    ///
    ForceSwitchCustomer = 10017,
    ///
    CustomerInitiativeMsg = 10018,
    ///
    SysNote = 10019,
    ///
    MachineSessEvaluation = 10020,
    ///
    ParagraphText = 10021,
    ///
    BusinessLink = 10022,
    ///
    SysBar = 10023,
}
impl MsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MsgType::Invalid => "MSG_TYPE_INVALID",
            MsgType::Text => "MSG_TYPE_TEXT",
            MsgType::Img => "MSG_TYPE_IMG",
            MsgType::Withdraw => "MSG_TYPE_WITHDRAW",
            MsgType::FavEmoji => "MSG_TYPE_FAV_EMOJI",
            MsgType::Share => "MSG_TYPE_SHARE",
            MsgType::Video => "MSG_TYPE_VIDEO",
            MsgType::Order => "MSG_TYPE_ORDER",
            MsgType::Goods => "MSG_TYPE_GOODS",
            MsgType::Evaluation => "MSG_TYPE_EVALUATION",
            MsgType::Message => "MSG_TYPE_MESSAGE",
            MsgType::MachineA => "MSG_TYPE_MACHINE_A",
            MsgType::MachineQ => "MSG_TYPE_MACHINE_Q",
            MsgType::CustomerCome => "MSG_TYPE_CUSTOMER_COME",
            MsgType::MachineWelcomeText => "MSG_TYPE_MACHINE_WELCOME_TEXT",
            MsgType::MachineWelcomeQlist => "MSG_TYPE_MACHINE_WELCOME_QLIST",
            MsgType::SplitQ => "MSG_TYPE_SPLIT_Q",
            MsgType::SplitA => "MSG_TYPE_SPLIT_A",
            MsgType::SwitchCustomer => "MSG_TYPE_SWITCH_CUSTOMER",
            MsgType::CustomerInviteEvaluation => "MSG_TYPE_CUSTOMER_INVITE_EVALUATION",
            MsgType::OutCustomerQueue => "MSG_TYPE_OUT_CUSTOMER_QUEUE",
            MsgType::OutCustomerSess => "MSG_TYPE_OUT_CUSTOMER_SESS",
            MsgType::MessageGuide => "MSG_TYPE_MESSAGE_GUIDE",
            MsgType::ForceSwitchCustomer => "MSG_TYPE_FORCE_SWITCH_CUSTOMER",
            MsgType::CustomerInitiativeMsg => "MSG_TYPE_CUSTOMER_INITIATIVE_MSG",
            MsgType::SysNote => "MSG_TYPE_SYS_NOTE",
            MsgType::MachineSessEvaluation => "MSG_TYPE_MACHINE_SESS_EVALUATION",
            MsgType::ParagraphText => "MSG_TYPE_PARAGRAPH_TEXT",
            MsgType::BusinessLink => "MSG_TYPE_BUSINESS_LINK",
            MsgType::SysBar => "MSG_TYPE_SYS_BAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MSG_TYPE_INVALID" => Some(Self::Invalid),
            "MSG_TYPE_TEXT" => Some(Self::Text),
            "MSG_TYPE_IMG" => Some(Self::Img),
            "MSG_TYPE_WITHDRAW" => Some(Self::Withdraw),
            "MSG_TYPE_FAV_EMOJI" => Some(Self::FavEmoji),
            "MSG_TYPE_SHARE" => Some(Self::Share),
            "MSG_TYPE_VIDEO" => Some(Self::Video),
            "MSG_TYPE_ORDER" => Some(Self::Order),
            "MSG_TYPE_GOODS" => Some(Self::Goods),
            "MSG_TYPE_EVALUATION" => Some(Self::Evaluation),
            "MSG_TYPE_MESSAGE" => Some(Self::Message),
            "MSG_TYPE_MACHINE_A" => Some(Self::MachineA),
            "MSG_TYPE_MACHINE_Q" => Some(Self::MachineQ),
            "MSG_TYPE_CUSTOMER_COME" => Some(Self::CustomerCome),
            "MSG_TYPE_MACHINE_WELCOME_TEXT" => Some(Self::MachineWelcomeText),
            "MSG_TYPE_MACHINE_WELCOME_QLIST" => Some(Self::MachineWelcomeQlist),
            "MSG_TYPE_SPLIT_Q" => Some(Self::SplitQ),
            "MSG_TYPE_SPLIT_A" => Some(Self::SplitA),
            "MSG_TYPE_SWITCH_CUSTOMER" => Some(Self::SwitchCustomer),
            "MSG_TYPE_CUSTOMER_INVITE_EVALUATION" => Some(Self::CustomerInviteEvaluation),
            "MSG_TYPE_OUT_CUSTOMER_QUEUE" => Some(Self::OutCustomerQueue),
            "MSG_TYPE_OUT_CUSTOMER_SESS" => Some(Self::OutCustomerSess),
            "MSG_TYPE_MESSAGE_GUIDE" => Some(Self::MessageGuide),
            "MSG_TYPE_FORCE_SWITCH_CUSTOMER" => Some(Self::ForceSwitchCustomer),
            "MSG_TYPE_CUSTOMER_INITIATIVE_MSG" => Some(Self::CustomerInitiativeMsg),
            "MSG_TYPE_SYS_NOTE" => Some(Self::SysNote),
            "MSG_TYPE_MACHINE_SESS_EVALUATION" => Some(Self::MachineSessEvaluation),
            "MSG_TYPE_PARAGRAPH_TEXT" => Some(Self::ParagraphText),
            "MSG_TYPE_BUSINESS_LINK" => Some(Self::BusinessLink),
            "MSG_TYPE_SYS_BAR" => Some(Self::SysBar),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NotifyMsgType {
    ///
    UnUsable = 0,
    ///
    RankUpdate = 400,
    ///
    MsgTalk = 401,
    ///
    SubmitWorkOrderDraft = 402,
}
impl NotifyMsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NotifyMsgType::UnUsable => "UN_USABLE",
            NotifyMsgType::RankUpdate => "RANK_UPDATE",
            NotifyMsgType::MsgTalk => "MSG_TALK",
            NotifyMsgType::SubmitWorkOrderDraft => "SUBMIT_WORK_ORDER_DRAFT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UN_USABLE" => Some(Self::UnUsable),
            "RANK_UPDATE" => Some(Self::RankUpdate),
            "MSG_TALK" => Some(Self::MsgTalk),
            "SUBMIT_WORK_ORDER_DRAFT" => Some(Self::SubmitWorkOrderDraft),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Select {
    ///
    Able = 0,
    ///
    Selected = 1,
    ///
    Unable = 2,
}
impl Select {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Select::Able => "ABLE",
            Select::Selected => "SELECTED",
            Select::Unable => "UNABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ABLE" => Some(Self::Able),
            "SELECTED" => Some(Self::Selected),
            "UNABLE" => Some(Self::Unable),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Situation {
    ///
    Invalid = 0,
    ///
    Im = 1,
    ///
    ServiceCenter = 2,
    ///
    Order = 3,
    ///
    Push = 4,
    ///
    Goods = 5,
    ///
    VipMall = 6,
    ///
    Else = 7,
    ///
    Live = 8,
    ///
    Space = 9,
}
impl Situation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Situation::Invalid => "Invalid",
            Situation::Im => "IM",
            Situation::ServiceCenter => "ServiceCenter",
            Situation::Order => "Order",
            Situation::Push => "Push",
            Situation::Goods => "Goods",
            Situation::VipMall => "VipMall",
            Situation::Else => "Else",
            Situation::Live => "Live",
            Situation::Space => "Space",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Invalid" => Some(Self::Invalid),
            "IM" => Some(Self::Im),
            "ServiceCenter" => Some(Self::ServiceCenter),
            "Order" => Some(Self::Order),
            "Push" => Some(Self::Push),
            "Goods" => Some(Self::Goods),
            "VipMall" => Some(Self::VipMall),
            "Else" => Some(Self::Else),
            "Live" => Some(Self::Live),
            "Space" => Some(Self::Space),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SplitAnsMsgContentType {
    ///
    Business = 0,
    ///
    Group = 1,
    ///
    Custom = 2,
}
impl SplitAnsMsgContentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SplitAnsMsgContentType::Business => "BUSINESS",
            SplitAnsMsgContentType::Group => "GROUP",
            SplitAnsMsgContentType::Custom => "CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BUSINESS" => Some(Self::Business),
            "GROUP" => Some(Self::Group),
            "CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TalkerType {
    ///
    Machine = 0,
    ///
    Customer = 1,
    ///
    SysNotice = 2,
    ///
    User = 3,
}
impl TalkerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TalkerType::Machine => "MACHINE",
            TalkerType::Customer => "CUSTOMER",
            TalkerType::SysNotice => "SYS_NOTICE",
            TalkerType::User => "USER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MACHINE" => Some(Self::Machine),
            "CUSTOMER" => Some(Self::Customer),
            "SYS_NOTICE" => Some(Self::SysNotice),
            "USER" => Some(Self::User),
            _ => None,
        }
    }
}
